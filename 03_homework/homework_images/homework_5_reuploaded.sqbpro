<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/mishavitvinov/sql/05_sql/farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3698"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainbooth"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="homework_5.sql">-- Cross Join
/*1. Suppose every vendor in the `vendor_inventory` table had 5 of each of their products to sell to **every** 
customer on record. How much money would each vendor make per product? 
Show this by vendor_name and product name, rather than using the IDs.

HINT: Be sure you select only relevant columns and rows. 
Remember, CROSS JOIN will explode your table rows, so CROSS JOIN should likely be a subquery. 
Think a bit about the row counts: how many distinct vendors, product names are there (x)?
How many customers are there (y). 
Before your final group by you should have the product of those two queries (x*y).  */

WITH VendorProductCombination AS (
    SELECT 
        v.vendor_id,
        v.vendor_name,
        p.product_id,
        p.product_name
    FROM 
        vendor v
    CROSS JOIN 
        product p
)
SELECT 
    vpc.vendor_name,
    vpc.product_name,
    ROUND(SUM(vi.original_price * 5), 2) AS total_revenue_per_product
FROM 
    VendorProductCombination vpc
JOIN 
    vendor_inventory vi ON vpc.vendor_id = vi.vendor_id AND vpc.product_id = vi.product_id
GROUP BY 
    vpc.vendor_name,
    vpc.product_name;

-- INSERT
/*1.  Create a new table &quot;product_units&quot;. 
This table will contain only products where the `product_qty_type = 'unit'`. 
It should use all of the columns from the product table, as well as a new column for the `CURRENT_TIMESTAMP`.  
Name the timestamp column `snapshot_timestamp`. */

CREATE TABLE product_units AS
SELECT *,
       CURRENT_TIMESTAMP AS snapshot_timestamp
FROM product
WHERE product_qty_type = 'unit';

/*2. Using `INSERT`, add a new row to the product_units table (with an updated timestamp). 
This can be any product you desire (e.g. add another record for Apple Pie). */

INSERT INTO product_units
(product_id, product_name, product_size, product_category_id, product_qty_type, snapshot_timestamp)
VALUES
(1002, 'Orange Juice', '1 liter', 2, 'unit', CURRENT_TIMESTAMP);

-- DELETE
/* 1. Delete the older record for the whatever product you added. 

HINT: If you don't specify a WHERE clause, you are going to have a bad time.*/

DELETE FROM product_units
WHERE product_name = 'Orange Juice'
AND snapshot_timestamp &lt; CURRENT_TIMESTAMP;

-- UPDATE
/* 1.We want to add the current_quantity to the product_units table. 
First, add a new column, current_quantity to the table using the following syntax.

ALTER TABLE product_units
ADD current_quantity INT;

Then, using UPDATE, change the current_quantity equal to the last quantity value from the vendor_inventory details.

HINT: This one is pretty hard. 
First, determine how to get the &quot;last&quot; quantity per product. 
Second, coalesce null values to 0 (if you don't have null values, figure out how to rearrange your query so you do.) 
Third, SET current_quantity = (...your select statement...), remembering that WHERE can only accommodate one column. 
Finally, make sure you have a WHERE statement to update the right row, 
	you'll need to use product_units.product_id to refer to the correct row within the product_units table. 
When you have all of these components, you can run the update statement. */

ALTER TABLE product_units
ADD current_quantity INT;

UPDATE product_units
SET current_quantity = (
    SELECT current_quantity
    FROM (
        SELECT p.product_id, COALESCE(quantity, 0) as current_quantity
        FROM product_units p
        LEFT JOIN (
            SELECT *,
                   ROW_NUMBER() OVER(PARTITION BY vi.product_id ORDER BY market_date DESC) AS rn
            FROM vendor_inventory vi
        ) vi ON p.product_id = vi.product_id
        WHERE rn = 1 OR rn IS NULL
    ) p
    WHERE product_units.product_id = p.product_id
);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
